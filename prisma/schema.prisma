// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preferences {
    User     User[]
    id       String  @id @default(cuid())
    darkMode Boolean
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Folder        Folder[]
    File          File[]
    scope         String? // Path of the scope (what user is able to acceess)
    Permission    Permission[]
    Preferences   Preferences? @relation(fields: [preferencesId], references: [id])
    preferencesId String?

    @@index([name])
    @@index([email])
    @@index([scope])
}

model Permission {
    id       Int     @id @default(autoincrement())
    read     Boolean // Is user allowed to read?
    write    Boolean // Is user allowed to write?
    user     User    @relation(fields: [userId], references: [id]) // User who has the permission, below is the id
    userId   String
    file     File?   @relation(fields: [fileId], references: [id]) // File that the permission is for, along with id (optional)
    fileId   Int?
    folder   Folder? @relation(fields: [folderId], references: [id]) // Folder that the permission is for, along with id (optional)
    folderId Int?

    @@index([userId])
    @@index([fileId])
    @@index([folderId])
}

model File {
    id          Int          @id @default(autoincrement())
    name        String
    path        String       @unique // Full path
    permissions Permission[]
    content     String // Content of the file, this may become a problem, but we'll see
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    createdBy   User    @relation(fields: [createdById], references: [id])
    createdById String
    Parent      Folder? @relation(fields: [parentId], references: [id]) // Parent folder, along with id
    parentId    Int?

    @@index([name])
}

model Folder {
    id          Int          @id @default(autoincrement())
    name        String
    files       File[]
    folders     Folder[]     @relation("FoldersOnFolders")
    parent      Folder?      @relation("FoldersOnFolders", fields: [parentId], references: [id])
    parentId    Int?
    permissions Permission[]
    path        String       @unique
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
